:mod:`screen_single_word`
=========================

.. py:module:: screen_single_word


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   screen_single_word.WordProperties
   screen_single_word.Tab
   screen_single_word.ImageSearchResultGrid
   screen_single_word.TestApp



Functions
~~~~~~~~~

.. autoapisummary::

   screen_single_word.get_selection_dict
   screen_single_word.confirm_choice


.. py:class:: WordProperties(**kwargs)

   Bases: :class:`kivy.uix.boxlayout.BoxLayout`

   Box layout class. See module documentation for more information.

   .. method:: refresh_data(self)



   .. method:: accept_suggestion(self, suggestion)



   .. method:: load_or_search(self, search_term)




.. function:: get_selection_dict()


.. py:class:: Tab(**kwargs)

   Bases: :class:`kivy.uix.floatlayout.FloatLayout`, :class:`kivymd.uix.tab.MDTabsBase`

   Class implementing content for a tab.

   .. attribute:: id
      

      

   .. attribute:: text
      

      

   .. attribute:: icon
      

      


.. py:class:: ImageSearchResultGrid(**kwargs)

   Bases: :class:`my_kivy.mychooser.MyCheckImageGrid`

   Widget class. See module documentation for more information.

   :Events:
       `on_touch_down`: `(touch, )`
           Fired when a new touch event occurs. `touch` is the touch object.
       `on_touch_move`: `(touch, )`
           Fired when an existing touch moves. `touch` is the touch object.
       `on_touch_up`: `(touch, )`
           Fired when an existing touch disappears. `touch` is the touch
           object.
       `on_kv_post`: `(base_widget, )`
           Fired after all the kv rules associated with the widget
           and all other widgets that are in any of those rules have had
           all their kv rules applied. `base_widget` is the base-most widget
           whose instantiation triggered the kv rules (i.e. the widget
           instantiated from Python, e.g. ``MyWidget()``).

           .. versionchanged:: 1.11.0

   .. warning::
       Adding a `__del__` method to a class derived from Widget with Python
       prior to 3.4 will disable automatic garbage collection for instances
       of that class. This is because the Widget class creates reference
       cycles, thereby `preventing garbage collection
       <https://docs.python.org/2/library/gc.html#gc.garbage>`_.

   .. versionchanged:: 1.0.9
       Everything related to event properties has been moved to the
       :class:`~kivy.event.EventDispatcher`. Event properties can now be used
       when contructing a simple class without subclassing :class:`Widget`.

   .. versionchanged:: 1.5.0
       The constructor now accepts on_* arguments to automatically bind
       callbacks to properties or events, as in the Kv language.

   .. method:: get_images(self, keywords=None)




.. function:: confirm_choice()


.. py:class:: TestApp(**kwargs)

   Bases: :class:`kivymd.app.MDApp`

   Application class, see module documentation for more information.

   :Events:
       `on_start`:
           Fired when the application is being started (before the
           :func:`~kivy.base.runTouchApp` call.
       `on_stop`:
           Fired when the application stops.
       `on_pause`:
           Fired when the application is paused by the OS.
       `on_resume`:
           Fired when the application is resumed from pause by the OS. Beware:
           you have no guarantee that this event will be fired after the
           `on_pause` event has been called.

   .. versionchanged:: 1.7.0
       Parameter `kv_file` added.

   .. versionchanged:: 1.8.0
       Parameters `kv_file` and `kv_directory` are now properties of App.

   .. method:: build(self)


      Initializes the application; it will be called only once.
      If this method returns a widget (tree), it will be used as the root
      widget and added to the window.

      :return:
          None or a root :class:`~kivy.uix.widget.Widget` instance
          if no self.root exists.



