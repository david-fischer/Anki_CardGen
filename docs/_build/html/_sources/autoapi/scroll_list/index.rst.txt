:mod:`scroll_list`
==================

.. py:module:: scroll_list


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   scroll_list.ScrollList
   scroll_list.LeftStatusIndicator
   scroll_list.LeftStatusIndicatorListItem
   scroll_list.TestApp



Functions
~~~~~~~~~

.. autoapisummary::

   scroll_list.schedule


.. py:class:: ScrollList(**kwargs)

   Bases: :class:`kivy.uix.scrollview.ScrollView`

   ScrollView class. See module documentation for more information.

   :Events:
       `on_scroll_start`
           Generic event fired when scrolling starts from touch.
       `on_scroll_move`
           Generic event fired when scrolling move from touch.
       `on_scroll_stop`
           Generic event fired when scrolling stops from touch.

   .. versionchanged:: 1.9.0
       `on_scroll_start`, `on_scroll_move` and `on_scroll_stop` events are
       now dispatched when scrolling to handle nested ScrollViews.

   .. versionchanged:: 1.7.0
       `auto_scroll`, `scroll_friction`, `scroll_moves`, `scroll_stoptime' has
       been deprecated, use :attr:`effect_cls` instead.

   .. attribute:: item_type
      

      

   .. attribute:: item_dicts
      

      

   .. attribute:: items
      

      

   .. attribute:: list
      

      

   .. attribute:: callback
      

      

   .. method:: on_item_dicts(self, *_)




.. py:class:: LeftStatusIndicator(**kwargs)

   Bases: :class:`kivymd.uix.list.ILeftBody`, :class:`kivy.uix.anchorlayout.AnchorLayout`

   Pseudo-interface for widgets that go in the left container for
   ListItems that support it.

   Implements nothing and requires no implementation, for annotation only.

   .. attribute:: spinner
      

      

   .. attribute:: icon
      

      


.. py:class:: LeftStatusIndicatorListItem(**kwargs)

   Bases: :class:`kivymd.uix.list.OneLineAvatarListItem`

   Overrides ``add_widget`` in a ``ListItem`` to include support
   for ``I*Body`` widgets when the appropiate containers are present.

   .. attribute:: loading_state
      

      

   .. attribute:: spinner
      

      


.. function:: schedule(obj)


.. py:class:: TestApp(**kwargs)

   Bases: :class:`kivymd.app.MDApp`

   Application class, see module documentation for more information.

   :Events:
       `on_start`:
           Fired when the application is being started (before the
           :func:`~kivy.base.runTouchApp` call.
       `on_stop`:
           Fired when the application stops.
       `on_pause`:
           Fired when the application is paused by the OS.
       `on_resume`:
           Fired when the application is resumed from pause by the OS. Beware:
           you have no guarantee that this event will be fired after the
           `on_pause` event has been called.

   .. versionchanged:: 1.7.0
       Parameter `kv_file` added.

   .. versionchanged:: 1.8.0
       Parameters `kv_file` and `kv_directory` are now properties of App.

   .. method:: build(self)


      Initializes the application; it will be called only once.
      If this method returns a widget (tree), it will be used as the root
      widget and added to the window.

      :return:
          None or a root :class:`~kivy.uix.widget.Widget` instance
          if no self.root exists.



