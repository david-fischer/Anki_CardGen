:mod:`words`
============

.. py:module:: words

.. autoapi-nested-parse::

   Implementation of :class:`Word`.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   words.Word



.. data:: translator
   

   

.. py:class:: Word

   Class that fetches and edits the data that makes up the choices, presented to the user in the card-generation
   process.

   Main function is :meth:`search` function.

   .. attribute:: search_term
      :annotation: :str = 

      

   .. attribute:: word_type
      :annotation: :str = 

      

   .. attribute:: gender
      :annotation: :str = 

      

   .. attribute:: examples
      :annotation: :list = []

      

   .. attribute:: explanations
      :annotation: :list = []

      

   .. attribute:: synonyms
      :annotation: :list = []

      

   .. attribute:: antonyms
      :annotation: :list = []

      

   .. attribute:: translations
      :annotation: :list = []

      

   .. attribute:: trans_syns
      :annotation: :list = []

      

   .. attribute:: image_urls
      :annotation: :list = []

      

   .. attribute:: _audio_url
      :annotation: :str = 

      

   .. attribute:: add_info_dict
      :annotation: :dict

      

   .. attribute:: conj_table_html
      :annotation: :str = 

      

   .. attribute:: data_dir
      :annotation: :str = data

      

   .. attribute:: from_lang
      :annotation: :str = pt

      

   .. attribute:: to_lang
      :annotation: :str = de

      

   .. method:: __attrs_post_init__(self)



   .. method:: audio_url(self)
      :property:


      Getter function for :attr:`_audio_url`


   .. method:: search_term_utf8(self)


      :returns: :attr:`search_term` with special characters replaced.


   .. method:: folder(self)


      Used as folder name to save files to.

      :returns: :method:`search_term_utf8` with spaces replaced by underscores.


   .. method:: translate(self, string)


      Translates string from :attr:`from_lang` to :attr:`to_lang`.

      :returns: Translated string.


   .. method:: request_data(self)


      Iterates through parsers and passes results to :meth:`update_from_dict`


   .. method:: update_from_dict(self, attr_dict)


      Iterates through attr_dict and updates :class:`Word` attributes.

      If the value is a list, it extends the original list, else the value is set to the value of attr_dict

      :param attr_dict: Each key should be the name of an attribute of :class:`Word`, the value corresponds to the updated value.


   .. method:: add_translations(self)


      For the attributes ["examples", "synonyms", "antonyms"], it iterates to the corresponding lists and adds
      translations, where none are already present.


   .. method:: request_img_urls(self, keywords=None)


      :param keywords: String for image search. (Default value = None)
                       If not set, defaults to :attr:`search_term`.

      :returns: List of img_urls.


   .. method:: mark_examples(self)


      Highlights the search_word in the example sentences using css.


   .. method:: from_json(cls, path)
      :classmethod:


      Initializes :class:`Word` from dictionary saved as .json.


   .. method:: save_as_json(self, path=None)


      Saves class attributes as dictionary in a .json-file.

      :param path: If None, is set to f"data/{self.folder()}/{self.folder()}.json" (Default value = None)


   .. method:: search(self, new_search_term)


      If possible loads from previously saved search.
      If not, uses the parsers to obtain info and adds translations, then saves the result for future searches.

      :param new_search_term:



.. data:: q
   

   

