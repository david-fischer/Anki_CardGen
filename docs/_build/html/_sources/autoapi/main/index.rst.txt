:mod:`main`
===========

.. py:module:: main


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   main.DrawerItem
   main.DrawerList
   main.MainMenu
   main.AnkiCardGenApp



.. data:: this_dir
   

   

.. data:: this_dir
   

   

.. py:class:: DrawerItem(**kwargs)

   Bases: :class:`my_kivy.mychooser.CheckBehavior`, :class:`kivymd.uix.list.OneLineIconListItem`

   Test

   .. attribute:: icon
      

      

   .. attribute:: screen_name
      

      

   .. method:: __post_init__(self, *_)



   .. method:: on_release(self)




.. py:class:: DrawerList(**kwargs)

   Bases: :class:`kivymd.theming.ThemableBehavior`, :class:`my_kivy.mychooser.CheckContainer`, :class:`kivymd.uix.list.MDList`

   Test

   .. attribute:: check_one
      :annotation: = True

      

   .. attribute:: CheckElementObject
      

      

   .. attribute:: current
      

      

   .. method:: conditional_uncheck(self, instance, value)


      changes color of clicked item and updates :attr:`current`



.. py:class:: MainMenu(**kwargs)

   Bases: :class:`kivy.uix.stacklayout.StackLayout`

   Test

   .. attribute:: screen_dicts
      

      :class:`~kivy.properties.ListProperty` containing the dictionaries describing all screens.


   .. method:: on_parent(self, *_)


      This function sets up the screens using the words from :attr:`screen_dicts`.

      The screens are added to the screen_man and corresponding entries to the drawer_list.
      Then :attr:`DrawerList.current` is bound to screen_man.current and vice-versa.



.. py:class:: AnkiCardGenApp(**kwargs)

   Bases: :class:`kivymd.app.MDApp`

   Main App.

   .. attribute:: dialog
      

      :class:`~kivymd.uix.dialog.MDDialog` Object


   .. attribute:: file_manager
      

      :class:`~kivymd.uix.filemanager.MDFileManager` Object


   .. attribute:: theme_dialog
      

      :class:`~kivymd.uix.picker.MDThemePicker` Object


   .. attribute:: word
      

      :class:`pt_word.Word` Object


   .. attribute:: anki
      

      :class:`generate_anki_card.AnkiObject` Object


   .. attribute:: q
      

      :class:`queue.Queue` Object


   .. attribute:: error_words
      

      :class:`~kivy.properties.ListProperty` containing all words that could not be processed by Queue.


   .. attribute:: queue_words
      

      :class:`~kivy.properties.ListProperty` containing all words not yet made into Anki-cards.


   .. attribute:: done_words
      

      :class:`~kivy.properties.ListProperty` containing all words for which Anki-cards have been generated.


   .. attribute:: loading_state_dict
      

      :class:`~kivy.properties.DictProperty` containing all words that could not be processed by Queue.


   .. attribute:: keys_to_save
      

      :class:`~kivy.properties.ListProperty` containing the name of all attributes that should be saved on change.


   .. method:: show_dialog(self, message, options=None, callback=print, item_function=None, buttons=None)


      :param message:
      :param options: (Default value = None)
      :param callback: (Default value = print)
      :param item_function: (Default value = None)
      :param buttons: (Default value = None)

      Returns:


   .. method:: build_config(self, config)


      :param config:

      Returns:


   .. method:: build(self)



   .. method:: setup_queue(self)



   .. method:: save_theme(self, *_)


      :param \*\_:

      Returns:


   .. method:: open_file_manager(self, path='/', select_path=print, ext=None)


      :param path: (Default value = "/")
      :param select_path: (Default value = print)
      :param ext: (Default value = None)

      Returns:


   .. method:: load_by_config_key(self, key)


      :param key:

      Returns:


   .. method:: save_by_config_key(self, key, *_, obj=None)


      :param key:
      :param \*\_:
      :param obj: (Default value = None)

      Returns:


   .. method:: load_app_state(self)



   .. method:: add_anki_card(self, result_dict)


      :param result_dict:

      Returns:



