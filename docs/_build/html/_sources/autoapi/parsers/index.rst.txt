:mod:`parsers`
==============

.. py:module:: parsers

.. autoapi-nested-parse::

   This module provides different parsers (children of :class:`Parser`) to obtain the necessary words to fill the
   Anki-cards.

   Each parser returns a dict, that can directly be used by the :meth:`pt_word.Word.update_from_dict` method of the
   :class:`pt_word.Word`
   class.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   parsers.DicioParser
   parsers.GoogleImagesParser
   parsers.LingueeParser
   parsers.Parser
   parsers.ReversoParser



Functions
~~~~~~~~~

.. autoapisummary::

   parsers.get_element_after_regex
   parsers.linguee_did_you_mean
   parsers.to_stripped_multiline_str


.. data:: DEFAULT_HEADERS
   

   Default headers for the :class:`Parser` class.


.. data:: LANGUAGES
   

   

.. data:: LINGUEE_HEADERS
   

   

.. data:: REVERSO_HEADERS
   

   

.. data:: TEST_WORD
   :annotation: = 

   

.. py:exception:: NoMatchError(site='')

   Bases: :class:`Exception`

   Error if no match can be found for the current search.


.. py:class:: DicioParser

   Bases: :class:`parsers.Parser`

   Uses Dicio to obtain: explanations, synonyms, antonyms, examples, add_info_dict, conj_table_html

   .. attribute:: base_url
      :annotation: = https://www.dicio.com.br/pesquisa.php?q={phrase}/

      

   .. method:: _conj_df(bs_obj)
      :staticmethod:



   .. method:: _html_from_conj_df(conj_table_df)
      :staticmethod:



   .. method:: parse_response(self, response)


      Extracts explanations, synonyms, antonyms, examples, add_info_dict, conj_table_html


   .. method:: setup(self)


      Stuff that needs to be executed before :meth:`url` is called.



.. py:class:: GoogleImagesParser

   Bases: :class:`parsers.Parser`

   Uses google_images_download to get img_urls.

   .. method:: result_dict(self, phrase=None)


      :param phrase: If None, uses :attr:`phrase`. (Default value = None)

      :returns: Result of :meth:`parse_response`.



.. py:class:: LingueeParser

   Bases: :class:`parsers.Parser`

   Uses Linguee to obtain: translation, word_type, gender and audio_url

   .. attribute:: audio_base_url
      :annotation: = https://www.linguee.de/mp3/%s.mp3

      

   .. attribute:: base_url
      :annotation: = https://linguee-api.herokuapp.com/api?q={phrase}&src={from_lang}&dst={to_lang}

      

   .. attribute:: lang_dict
      

      

   .. method:: parse_response(self, response: requests.Response)


      Extracts translation, word_type, gender, audio_url



.. py:class:: Parser

   Base class for parsers.

   Main functionality is the result_dict function.

   .. attribute:: base_url
      :annotation: = 

      URL to make request to. Can contain every class attribute.
      E.g. https://some.url/{phrase}/dest={from_lang};src={to_lang}.html


   .. attribute:: from_lang
      :annotation: :str

      Target language.


   .. attribute:: headers
      :annotation: :dict

      Headers for the request. Defaults to :const:`DEFAULT_HEADERS`.


   .. attribute:: phrase
      :annotation: :str

      The word or phrase to search the site for.


   .. attribute:: to_lang
      :annotation: :str

      Source Language.


   .. method:: make_request(self, url=None)


      Uses :attr:`headers` to make an http-request via :meth:`~requests.get`

      :param url: If None, will be set to :meth:`url`. (Default value = None)

      :returns: :class:`~requests.Response` object


   .. method:: parse_response(self, response: requests.Response)


      :param response: Response to parse.
      :type response: :class:`~requests.Response`

      :returns: Dictionary with extracted information.


   .. method:: result_dict(self, phrase=None)


      :param phrase: If None, uses :attr:`phrase`. (Default value = None)

      :returns: Result of :meth:`parse_response`.


   .. method:: setup(self)


      Stuff that needs to be executed before :meth:`url` is called.


   .. method:: url(self)


      Get url for http-request.

      :returns: :attr:`base_url` formatted with all class attributes.



.. py:class:: ReversoParser

   Bases: :class:`parsers.Parser`

   Uses Reverso to obtain: examples

   .. attribute:: base_url
      :annotation: = https://context.reverso.net/{language_string}/{phrase}

      

   .. attribute:: headers
      

      

   .. attribute:: lang_dict
      

      

   .. attribute:: language_string
      

      

   .. method:: parse_response(self, response: requests.Response)


      :param response:
      :type response: :class:`~requests.Response`

      :returns: Dictionary {"examples": [[ex_1_from_lang,ex_1_to_lang],...]}


   .. method:: setup(self)


      Stuff that needs to be executed before :meth:`url` is called.



.. function:: get_element_after_regex(bs_obj, regex)

   Get bs_object after element which text-attribute matches a given regex.


.. function:: linguee_did_you_mean(search_term)

   Exctracts suggested corrections if the original search is not successful.

   :param search_term: original search_term

   :returns: List of possible corrections for the original search_term.


.. function:: to_stripped_multiline_str(bs_obj)

   Strips each line of a string of leading and trailing whitespace.


